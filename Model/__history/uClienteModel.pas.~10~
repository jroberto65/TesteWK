unit uClienteModel;

interface
uses
  System.SysUtils;
type
  TCliente = class
  private
    { private declarations }
    FCodigo: Integer;
    FNome: String;
    FTipo: String;
    FCPF: String;
    FCNPJ: String;
    FCEP: String;
    FEndereco: String;
    FNumero: Integer;
    FBairro: String;
    FCidade: String;
    FEstado: String;
    FComplemento: String;
    FTelefone: String;
    FCelular: String;
    FEmail: String;
    FInseridoEm: TDateTime;
    FInseridoPor: Integer;
    FModificadoEm: TDateTime;
    FModificadoPor: Integer;
    procedure SetNome(const Value: String);
  public
    { public declarations }
    //Utilizadn leitura e escrita do prórpio Delphi
    property Codigo: Integer read FCodigo write FCodigo;
    property Nome: String read FNome write SetNome;
    property Tipo: String read FTipo Write FTipo;
    property CPF: String read FCPF Write FCPF;
    property CNPJ: String read FCNPJ Write FCNPJ;
    property CEP: String read FCEP Write FCEP;
    property Endereco: String read FEndereco Write FEndereco;
    property Numero: Integer read FNumero write FNumero;
    property Bairro: String read FBairro Write FBairro;
    property Cidade: String read FCidade Write FCidade;
    property Estado: String read FEstado Write FEstado;
    property Complemento: String read FComplemento Write FComplemento;
    property Telefone: String read FTelefone Write FTelefone;
    property Celular: String read FCelular Write FCelular;
    property Email: String read FEmail Write FEmail;
    property InseridoEm: TDateTime read FInseridoEm Write FInseridoEm;
    property InseridoPor: Integer read FInseridoPor Write FInseridoPor;
    property ModificadoEm: TDateTime read FModificadoEm Write FModificadoEm;
    property ModificadoPor: Integer read FModificadoPor Write FModificadoPor;
  end;

implementation

{ TCliente }

procedure TCliente.SetNome(const Value: String);
begin
  if  not Value.isEmpty then
    FNome := Value
  else
    raise Exception.Create('Nome não pode ser vazio.');
end;

end.
